pipeline {
    agent any

    environment {
        APP_DIR = 'C:/ProgramData/Jenkins/.jenkins/workspace/DevOps-ISE/ecomwebsite'
        IMAGE_NAME = 'ecomwebsite-image'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_USERNAME = 'vedantonkar24' // Replace with your Docker Hub username
        DOCKER_PASSWORD = 'Denom@007' // This is the stored Jenkins secret (PAT)
        DOCKER_REPO = 'vedantonkar24/ecomwebsite-image'
        KUBERNETES_DEPLOYMENT_FILE = 'deployment.yaml' // Replace with your actual deployment file path
        KUBECONFIG = 'C:/ProgramData/Jenkins/.kube/config'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/VedantOnkar27/DevOps-ISE.git'
            }
        }

        stage('Install App') {
            steps {
                dir("${APP_DIR}") {
                    bat 'npm install'
                }
            }
        }

        stage('Test') {
            steps {
                dir("${APP_DIR}") {
                    bat 'npx jest --testMatch "src//*.test.js" --passWithNoTests'
                }
            }
        }

        stage('Code Review') {
            steps {
                dir("${APP_DIR}") {
                    bat 'npx eslint src --ext .js,.jsx --no-error-on-unmatched-pattern'
                }
            }
        }

        stage('Ensure Docker') {
            steps {
                bat '''
                    sc query com.docker.service | find "RUNNING"  1>nul
                    if errorlevel 1 (
                        echo "Starting Docker service..."
                        net start com.docker.service || echo "Failed to start Docker service"
                    ) else (
                        echo "Docker service already running."
                    )
                '''
            }
        }

        stage('List Files') {
            steps {
                script {
                    bat 'dir'
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    bat "echo ${DOCKER_PASSWORD} | docker login --username=${DOCKER_USERNAME} --password-stdin"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    bat "docker build . -t ${DOCKER_REPO}:latest"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        retry(2) {
                            bat "docker push ${DOCKER_REPO}:latest"
                        }
                    }
                }
            }
        }
stage('Check Kubernetes Connection') {
    steps {
        script {
            bat 'kubectl cluster-info'
        }
    }
}

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying to Kubernetes...'

                    // Apply Kubernetes deployment YAML
                    bat "kubectl apply -f ${KUBERNETES_DEPLOYMENT_FILE} --validate=false"

                    // Optionally scale the deployment
                    echo 'Scaling the deployment to 5 replicas...'
                    bat "kubectl scale deployment ecomwebsite-deployment --replicas=5"

                    // Wait for the deployment to be successfully updated
                    echo 'Waiting for deployment to be available...'
                    bat "kubectl rollout status deployment ecomwebsite-deployment"
                }
            }
        }

        stage('Declarative: Post Actions') {
            steps {
                echo 'Pipeline finished.'
                // You can add further actions here such as notifications.
                // Example: Slack or Email notifications based on success/failure.
            }
        }
    }
    post {
        failure {
            echo 'Pipeline failed!'
            // Optional: Add failure notifications here (Slack, Email, etc.) Hello
        }
    }
}

